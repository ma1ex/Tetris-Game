/**
 * Tetris engine
 */

'use strict';

// Создание основного элемента, содержащего сетку
 let tetris = document.createElement('div');
 tetris.classList.add('tetris');

 // Отрисовка 180-ти ячеек поля (18x10)
for (let i = 0; i < 181; i++) {
    let excel = document.createElement('div');
    
    // Тестовая закраска стартовых ячеек для дебага
    if (i < 20) {
        excel.classList.add('excel-test');
    }

    excel.classList.add('excel');
    tetris.appendChild(excel);
}

// Вставка сформированной сетки в div-обертку
let main = document.getElementsByClassName('main')[0];
main.appendChild(tetris);

// Задание координат для каждой ячейки
let excel = document.getElementsByClassName('excel');
let i = 0;

/**
 * Назначение координат каждой ячейке.
 * Как это работает.
 * Отрисовка (назначение координат) происходит с самой верхней слева ячейки
 * слева направо сверху вниз. Т.е. первый цикл отвечает за ряды, а вложенный
 * за столбцы.
 */
for (let y = 18; y > 0; y--) {
    for (let x = 1; x < 11; x++) {
        excel[i].setAttribute('posX', x);
        excel[i].setAttribute('posY', y);
        // excel[i].setAttribute('posX: ', x);
        // excel[i].setAttribute('posY: ', y);
        i++;
    }
}

// Координаты для визуализации построения фигур; слева направо снизу вверх;
// От этих координат путем сложения или вычитания (отрицательные единицы)
// отрисовываются фигуры. 
// Например, для квадрата начальная точка отсчета по горизонтали (ось X)  
// равна 5 - это первая ячейка для отрисовки; двигаясь вправо, следующая точка
// на одну единицу вправо по оси X (по горизонтали), т.е. +1 к имеющейся 
// координате X, что по факту получается x = 6. Далее, двигаемся вверх по 
// оси Y и третья точка находится y + 1, а X остается в начальной позиции.
// Получается такая картина:
// [1, 0] -> [X вправо на +1, Y остается на месте]
// [0, 1] -> [X остается на месте, Y вверх на +1]
// [1, 1] -> [X вправо на +1, Y вверх на +1]
let x = 5, 
    y = 10;

/**
 * Трехмерный массив с фигурами: 
 * mainArr[номер фигуры][строка с координатами X и Y][ячейка с координатой X или Y]
 */
// [x, y] -> [->, ^]
let mainArr = [
    // Балка
    [
        [0, 1],
        [0, 2],
        [0, 3]
    ],

    // Квадрат
    [
        [1, 0],
        [0, 1],
        [1, 1],
    ]
];

// Текущая фигура, выбранная генератором псевдослучайных чисел; 
// выбирается из массива фигур и далее с ней происходит основная работа
let currentFigure = 0;
// Массив с координатами для дальнейшей закраски
let figureBody = 0;

// Функция создания фигуры
function create() {
    // Получение случайного числа в пределах длины массива с фигурами
    let getRandom = () => Math.round( Math.random() * (mainArr.length-1) );
    currentFigure = getRandom();
   
    // Формирование фигуры по заданным исходным координатам;
    // в этом массиве массив
    figureBody = [
        // Начальные координаты поля откуда начинается отрисовка
        document.querySelector(`[posX = "${x}"][posY = "${y}"]`),
        // Координаты получаем из атрибута элемента (ячейки) posX="" и posY="",
        // которые предварительно вносили циклом после отрисовки игрового поля.
        // начальная координата X или Y + mainArr[номер фигуры][строка с координатами X и Y][ячейка с координатой X или Y]
        document.querySelector(`[posX = "${x + mainArr[currentFigure][0][0]}"][posY = "${y + mainArr[currentFigure][0][1]}"]`),
        document.querySelector(`[posX = "${x + mainArr[currentFigure][1][0]}"][posY = "${y + mainArr[currentFigure][1][1]}"]`),
        document.querySelector(`[posX = "${x + mainArr[currentFigure][2][0]}"][posY = "${y + mainArr[currentFigure][2][1]}"]`)
    ];

    // Присвоение CSS-стиля к ячейкам сформированной фигуры - закраска
    for (let i = 0; i < figureBody.length; i++) {
        figureBody[i].classList.add('figure');
    }

}

create();